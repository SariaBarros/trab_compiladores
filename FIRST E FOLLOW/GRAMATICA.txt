Program -> ClassList | EPSILON
ClassList -> ClassDecl ClassList | ClassDecl
ClassDecl -> class ID ClassBody | class ID extends ID ClassBody
ClassBody -> { VarDeclListOpt ConstructDeclListOpt MethodDeclListOpt }
VarDeclListOpt -> VarDeclList | EPSILON
VarDeclList -> VarDecl VarDeclListL
VarDeclListL -> VarDecl VarDeclListL | EPSILON
VarDecl -> Type ID VarDeclOpt ; | Type [] ID VarDeclOpt ;
VarDeclOpt -> , ID VarDeclOpt | EPSILON
Type -> int | string | ID
ConstructDeclListOpt -> ConstructDeclList | EPSILON
ConstructDeclList -> ConstructDecl ConstructDeclListL
ConstructDeclListL -> ConstructDecl ConstructDeclListL | EPSILON
ConstructDecl -> constructor MethodBody
MethodDeclListOpt -> MethodDeclList | EPSILON
MethodDeclList -> MethodDecl MethodDeclListL
MethodDeclListL -> MethodDecl MethodDeclListL | EPSILON
MethodDecl -> Type ID MethodBody | Type [] ID MethodBody
MethodBody -> LPAR ParamListOpt RPAR { StatementsOpt }
ParamListOpt -> ParamList | EPSILON
ParamList -> Param ParamListL
ParamListL -> , Param ParamListL | EPSILON
Param -> Type ID | Type [] ID
StatementsOpt -> Statements| EPSILON
Statements ->  Statement StatementsL
StatementsL -> Statement StatementsL | EPSILON
Statement -> VarDeclList | AtribStat ; | PrintStat ; | ReadStat ; | ReturnStat ; | SuperStat ; | IfStat | ForStat | break ; | ;
AtribStat -> LValue = Expression| LValue = AllocExpression
PrintStat -> print Expression
ReadStat -> read LValue
ReturnStat -> return Expression
SuperStat -> super LPAR ArgListOpt RPAR
IfStat -> if LPAR Expression RPAR { Statements }| if LPAR Expression RPAR { Statements } else { Statements }
ForStat -> for LPAR AtribStatOpt ; ExpressionOpt ; AtribStatOpt RPAR { Statements }
AtribStatOpt -> AtribStat | EPSILON
ExpressionOpt -> Expression | EPSILON
LValue -> ID LValueComp | ID [ Expression ] LValueComp
LValueComp -> . ID LValueComp | . ID [ Expression ] LValueComp | EPSILON
Expression -> NumExpression | NumExpression RelOp NumExpression
AllocExpression -> new ID LPAR ArgListOpt RPAR | Type [ Expression ]
NumExpression -> Term + Term | Term - Term | Term
Term -> UnaryExpression * UnaryExpression | UnaryExpression / UnaryExpression | UnaryExpression % UnaryExpression | UnaryExpression
UnaryExpression -> + Factor | - Factor
Factor -> INTEGER_LITERAL | STRING_LITERAL | LValue | LPAR Expression RPAR
ArgListOpt -> ArgList | EPSILON
ArgList -> Expression ArgListL
ArgListL -> , Expression ArgListL | EPSILON